welcome back everyone
in today's video we're going to be
discussing the topic of
queues now you're all pretty familiar with
queues from your everyday experience of
queueing for the bus or
whatever but queues are pretty common in
computer science too
generally speaking we would characterize
a queue as normally being a first in
first out data structure
whatever arrives first is going to leave
first and everything that arrives after
it's going to get queued up behind that
and then leave at the appropriate time
in normally the same order that it
arrived
now why do we use queues in computer
science
well pretty often with a computer system
you have one part of your system that's
generating data and the second part of
your system that's consuming the data
that's generated by the first one
now if the part of the system is
generating data
is generating data faster than the part
of the system that's receiving the data
can actually consume it
then you've got to cope with the rate
mismatch between the two and a q
is typically the way we would cope with
that rate mismatch at least temporarily
and this also occurs pretty often
because often the the system that's
generating the data
will not generate as a nice continuous
rate but it will generate a burst of
data
and then a little while later generate
another burst of data and the system
that's consuming the data
might not be able to consume all of that
burst in one go and so we need to have
some ability to absorb those bursts
otherwise we would have to clock the
generating system at exactly the same
rate it's being consumed
and that would give us a system that
performed really poorly so
having said that confusing with computer
science are just very common they happen
all over the place and so pretty good
idea for us to figure out how to
actually build a queue
now what we're going to look at today is
generally speaking what are the data
structures we would use
for a queue we're going to see how you
might build a queue in python
and in doing so i'm also going to
introduce you to the concept of
object-oriented programming
so let's get started

so how might you go about implementing a
queue in python
well you could potentially use a list
and so as elements arrive
we just keep appending onto the end of
the list
and appending is pretty efficient so we
don't have a problem with that
but the problem is that when elements
leave the list we need
to remove elements from the list and as
we've seen before
removing elements from the beginning of
the list is pretty inefficient
you could of course flip the list the
other way around
and when elements arrive you prepend
them onto the beginning of the list
and then when they leave you could
remove them from the end of the list
but adding elements to the beginning of
a list is also pretty inefficient in
python
so realistically a python list is not a
good data structure to implement a queue

so what do you do when none of the
existing data structures do what you
want
well you roll your own of course and so
what are we going to do we're going to
build
a linked list a link list is actually a
really pretty simple data structure
it's just a chain of elements and each
element can hold a particular value
so what's those elements going to be
well we're going to create
an element we're going to call it a node
and what does a node contain well the
first thing it contains
is the actual value that we want to
store
it's not much use if it doesn't actually
store stuff and the next thing it stores
is actually
a reference to the next thing in the
list
so this is just the basic data structure
that we're going to use to now build a
chain of elements
so how do you actually use this well the
first thing is we keep track of
where the head of the list is and where
the tail of the list is
initially those are are empty
and so what happens when we want to
store an element well we'll create a new
node of course
we'll create a node we'll put the value
we want to store in it in this case
one and the next is
currently going to be non because there
isn't anything after this in the list
and then we'll set head to point to this
and we'll set tail to point to this as
well
so now we have a linked list it's only
got one element in so it's not very
interesting but we have a linked list
okay another item of data comes along we
want to store so we're going to create
a new instance of our node we'll put two
in it
and then we need to link that into the
chain so we go to the tail
we use that to get to the last element
of the list
and we modify the next field
of the last element of the list to point
to our new element
and then we need to modify tail so we
need to
change tail from pointing at what was
the previous element to make it point at
a new element and now we've linked our
elements together into a list
and now another element comes along we
want to add
great we create a new node next is
currently set to none
we go to tail we go to the last element
of the list
we modify its next field to point to the
next thing in the list
and then we modify tail so that we keep
track of the fact that we're still at
the
end of the list
and that's how we add elements into our
linked list
now what happens when we want to delete
from the front of the list
well we go to head
we figure out what the first element is
and we simply modify
head so that it points not at the
original head of the list
but at the whatever this field pointed
out so it points here
and now this element is no longer in our
list
and so we can just get rid of it and if
python doesn't keep any references of it
anymore it will kind of disappear all by
itself
and so it's gone and you can
delete more elements in that way as you
see fit
so that means that we can efficiently
create new nodes
and stick them on the end of the list
and anytime we want to take a node off
the beginning of the list
we just modify head to point to the
second element of the list
reference this disappears and it's
erased and so it's efficient to add
to both the end and to add to the
beginning
and remove from the end of a linked list
now another thing about linked list to
note is actually we can add to the
middle or remove from the middle of a
linked list just fine too
so let's create another list
okay so there's a list with four
elements in
suppose that we want to delete element
number three of this list
now the first thing we need to do is to
actually find it and you can't just
index into the middle of a linked list
unfortunately that's the one thing
linked lists don't do well
but if we go to head we go to element
number one
we go to element number two if we go to
element number three we finally found
the element now how do we delete it
well all we need to do is keep track of
what the previous element was
and then we can look at what the next
element is and we can modify the
previous element
here to point to element number four
and then this can be deleted and
nothing else in the list needs to be
modified only the the element before it
needs to be modified
and it's gone and equally
if we want to add something to the
middle of the list we can come along
later with a new element that we want to
add we can create
element number five for example we've
created a nice new element
and if we know that we want to go to go
after element number two
then the first thing we do is copy the
next pointer
into there so that we actually keep
track of the right place
and then we modify the next pointer from
element number two to point at this
and then we've inserted an element
efficiently into the middle of the list
so that's the great thing about linked
lists you can
modify them by adding to one end or
removing from the other
end you can insert or remove from the
middle of the list the one thing that
they don't do well
is indexing into the middle of a list if
you have a list of a million elements
and you want to delete the one right in
the middle of it you have to start at
the beginning and go
all the way through the list hop by hop
to get to the one you delete
or or access or whatever you can only
efficiently access the beginning and the
end of the list the ones in the middle
are hard to get to at any instant in
time
now the next question is how would we go
about implementing a node in python
well this is where we're going to create
a new class of object
and a new class of object is going to be
called a node
so if we want to do that we need to
declare a class
node
and so this is just going to be our new
data type
now whenever you declare a class you
need to declare how to create
a new element of a class so we need to
find some functions that operate on this
particular new class
and the first one we want to do is call
init
and we use init to initialize the
new node when we create it and that
needs to take some parameters
it takes a parameter called self which
refers to
the node that we've just created and
it's going to take the value that we
want to store
and what are we going to do well all
we're going to do initially for a node
is to store its value within this
particular
object within this node so we can re
refer to the node
that we are our own node that we've just
created
and then we can create a value variable
within there
and set that equal to the value that we
just got passing as a parameter
and the second thing we can do is to set
self.next
to be equal to none
okay because we don't yet have a next
element in the list
now if we just created nodes in that way
that wouldn't be very useful we want to
add some additional functions to
actually do things that are useful
so we can define let's say an append
function
and what's the pen going to do first of
all it's going to take
self because we need to be able to refer
to our
own instance of this particular node
and it's going to take another node to
add
and so when we want to append to a node
well what are we going to do we need to
modify the next field as a node
to point to the new node so all append
is going to do
is do self.next
is equal to node and we'll store that
so that's great we can actually create a
new node and we can append to the node
now how might we use it well we declare
a new node
just by doing this n is equal to node
with a value let's say 1. and that
creates as a new node
now we can create another node n2
is equal to node two
so now we've got two nodes but they're
not linked together yet all we've got at
the moment
is node one
by itself and node 2
by itself but what we really want to do
is to link them together and that's
where this append function will come in
i'll just do n dot append
n2 and so
we called the append function what does
the pen do it modifies the next pointer
of the node that we call this on which
is this one which is this one over here
to be the node we just passed in and so
that will
link the nodes together like this and
then if we create another node
n3
we can append that onto the end of this
list by doing
n2 dot append
n3 so n3 equals node 3 we create a new
node
n2 dot append n3 calls this function
which modifies the next field of
this particular node to point to that
one and you can see we can link all the
nodes together into a nice chain that
way so that's really all we need from
the node
and we can then use this to actually
build up
a queue and we can use that to store our
transient temporary data as it comes
into our system or however we're using
our queue
okay so i've typed all that in and i've
also added a few tests just to be
sure that we've actually got things
right so
here's our node class that we we just
did on the whiteboard
and then some tests i go to create node
1
and i'll just check that the value and
the next fields are actually set
correctly
and i'll create another node node 2 and
we'll append node2 onto node1
and then we'll just check that that's
correctly modified
n1.next so that it's no longer none
we'll create a third node node3 and
we'll append that onto node two so now
we've got hopefully got a list of three
nodes
and finally let's actually check that
they're all properly linked together
into a list
so we'll start off with node one and
we'll set counter to be one because
we're at node and then we're just going
to go through
go following the the next pointers along
the chain
so while node.next is not non which
means we haven't got to the end yet
we're going to set node to be
no done next so each time we'll just
move one step further through the list
and as we go we'll count how many nodes
we've got through
now what should happen is we should end
up at the last node in the list which is
node three
and we should end up with a count which
is three and so
we'll assert that that's true we'll
assert that we've got to the last node
in the list
and that we counted correctly the right
number of nodes
and this will just give us some
confidence that we haven't messed up
something
it's very simple code but unlikely to
mess up but it's good to add the checks
anyway
okay so let's test that
it passes good so our very simple code
is
actually seems to be working
now it occurs to me that there's one
more thing we might want to do here
if we think about this append function
it is intended for appending to the end
of a list
but if we call it with a note that isn't
the last item in the list
it's simply going to overwrite the next
field and we'll lose track of the rest
of the list
and that would probably be a bad thing
so
should we mess up and use this
incorrectly
it's best if it actually raises an error
so maybe we should add a check um if
self dot next is
not non not none
then we've messed up and there's nothing
we can do to recover from this
whoever is using this is using it
incorrectly so we should raise an error
what type of error should we use
you could use several but value error
probably makes some sense
next node is not none there
so now if anybody most likely ourself
messes up
and uses this incorrectly it's going to
raise an error
and we won't get any further but at
least we'll know we've made a mistake
and that's the goal here okay so that's
our
node class implemented in python and
in principle that's actually all we need
to implement
our queue but if we use a queue like
that we'll have to manually fiddle with
creating nodes and
linking them together with append and
things like that and
that's just a little bit of a nuisance
we don't actually want to see
the innards of our linked list when
we're actually using it
we'd much rather prefer to see a
queue and then just add things to the
queue and remove things from the queue
and at the moment we're actually seeing
the implementation of our queue
rather than an abstract concept of a
queue
so it might be a good idea to try and
hide the
nodes behind another class for a queue
itself

so what do i mean by an abstract concept
of a queue
well what i'm really talking about is
what the
application programming interface of
that query is the api
and when somebody's using a queue they
really don't want to care about nodes
and things like that they just want to
care about
i want to stick things into queue i want
to get things out of the queue
so what's the api for our queue well the
only real three things we need to be
able to do is to create a creator queue
and then we need once we've got a queue
we need to be able to add things to the
queue
and we need to be able to pop the front
item off of the queue
and that is just the whole api for our
queue
so what would that look like if i'm
going to use it in python
well i might want to create a queue
by just saying i'd like a queue
there i've got a queue and then i want
to be able to add items to the queue
so q dot add
and all i want to be able to pass into
add is the value that i want to be able
to pass in
let's pass in say the number 27 and i
want to store that in the queue
and then i want to be able to add some
more items to the queue
q dot add say 42
and q dot add
57 and so then i can add things into the
queue and then i want to be able to get
items back out of the queue
and so what i might want is value
is equal to q dot pop
and that will just give me the first
item from the queue and i can call that
again and again to get the items back
out of the queue
and that's really the whole interface to
our queue you can see that
you don't need to see anything about how
the queue is implemented
all you need to know is how to use it
and so what we're going to do is hide
away inside the implementation of queue
all that mucking about with nodes and
stuff
okay it's time to write some code so
i've already added
those that api that we sketched out on
the whiteboard
into my editor here and
i've also added some tests so that we
can see whether things are done
so let's actually write the code for our
queue class
so the first thing we need to do is to
deal with the initialization of a brand
new queue
now what do we need to do in here well
the only real things that the
queue itself holds is the head and the
tail
so we need to initialize those self dot
head
is equal is equal to non
and sub dot tail is equal to not because
we don't have any elements in our list
when we start
and that's pretty much it for in it we
don't need to do anything else
now we need to add write the add
function so what are we going to put
into here
well what we're going to want to do is
to
do n is equal to node to create a node
and put the value in it now
at the moment i'm editing q dot pi and
i put my node class in a different file
i put it in simplenode.pi
so if i want to actually use it in here
i'm going to actually have to import it
so from simple
node import node
and with a capital letter there okay and
that should work that should let us
actually import
our node class into this new file
and then we'll be able to use it like we
use it here
okay so i've got a node stored in the
value i've now got to actually insert it
into the list
now there's essentially two cases i need
to deal with here
the first case is where there are
already items in the list
and the second case is where there are
no items in the list
and we need to deal with these slightly
differently so let's deal with the case
where there's no items first because
that's quite simple
so how do we know if there's no items
well
self.head will be none
the subject head is non then
we need to actually set self.head to
keep track of where our new node is
self.head is equal to n
and we also want to set that to be where
the tail is as well because head and
tail point to the same place when we've
got only one
one element in a list
okay so that's the case where there were
no elements in the
queue beforehand now what if there
were elements in the queue well we need
to make sure that we
actually keep track of the elements that
were there beforehand
so we're going to be appending on to the
tail of our list
so we need to modify the last element in
the list
self.tail dot append because if you
remember we wrote an append function to
add onto
a node that's already there and we can
append our new node
onto the end of the node that was
already in the
queue okay but we need to be careful
here we're not done yet
we also need to modify the tail so that
we
point at our newly created node so
self.tail is equal to n there
and now if we look at what we've just
written we see that
the list is if q is empty we add it
there if the queue
is not empty we add it there so we're
doing the same thing in both cases
and so it's probably a good idea to
avoid duplicate code like that and we'll
just take that out of the statement
because we're going to run it anyway
okay so that's enough to add the
new node onto the end of the list if
this exists
and it's enough to add it into an empty
list
so i think we're done with the add
function
okay what next well let's deal with
popping from the front of the list now
the first thing we need to do here
is actually to remember that we need to
preserve the value before we lose track
of it
so what we want is the value that is
contained in the first node in the list
so the first node in the list is
self.head and we want the value from
that
and we'll preserve that so that we don't
lose it
now what are we going to do well the
next thing we need to do is just to
remove
the head so that it doesn't point at the
first item
in the queue it points at the second
item in the queue
and to do that we have to look at the
first item in the queue
and its next field will be pointing at
the second item in the queue
so we can do self.head because that's
what we need to change
is equal to self dot head dot
next
so this initially is
the first item in our queue and
self.head.next will refer to the next
item in the queue
so the second item in the queue if one
exists otherwise it'll be set to none
and that's it for the case where we've
got
lots of elements in our in our queue and
we just want to remove the first one
but it's not always the case that there
are lots of items in our in our queue
there are other possibilities and there
are two other possibilities really
the first possibility is there was only
one item left and we're just removing
the last item
and the second possibility is there were
no items in the first place and so it
would be an error to call pop in that
case
so let's deal with the one item case
first
so let's find out if this is the last
item
well if it was the last item then at
this point in the code
self.head will have become none because
previously self.head.next was none
because there's only one item
so we can just check if self.head
is non now then
we've just removed the last item
item okay
so if we've removed the last item
removed
let's get the comment right
so if we've removed the last item then
the other thing we need to do is make
sure
that self.tail is also set to none so
that everything is all nice and
consistent
okay so that's what's happened when
we've
done the last item now
what would happen if we tried to pop
the element from the list when the list
itself had no elements in the first
place
but what would happen is we'd come into
pop and we'd try to do this
but when there were no elements
self.head is none
so it doesn't make sense to
self.head.value that would be an error
and python would would cause our code to
crash
and we don't want that to happen so
first of all we'd better actually check
are there any yet are there any items
and so if self.head
is non then there are no items
and so we need to do something
now what could we do here
there are at least two possibilities um
the first possibility
is to actually do something like return
none and that would be a perfectly
reasonable thing to do under some
circumstances
the downside with that is that whoever
calls pop then needs to check whether
they got anything
and that's probably not ideal
the other possibility is simply to say
you shouldn't have done that and to
raise an error
and i'm going to choose to raise an
error
raise value error
and that needs a string and i actually
wrote a test for this down there so i'm
just going to cut and paste the same
string that i put in there
because otherwise i'm going to end up
with probably not the same string given
my typing
okay so we're going to raise value error
if that
is the case now
this gives the user of this class a
little tiny bit of a problem
because they have no way of finding out
whether there was nothing left
so maybe we should add one more function
to our api
is empty
and all this does is it gives the user
our class the ability to check that
there's anything there
before they call pop so they don't
inadvertently trigger that value error
we just added
and so what we're going to do here we're
going to return
self dot head is not
and so self.head is none will be true if
the
queue is empty and therefore is empty
will return true
and that at least gives our user a
chance to find out before they call pop
whether there was nothing there
okay so let's check if we've dealt with
all the cases
if self.head is not then there were no
items left
so we should raise an error
if we get through to here then there
were at least one item left
so we need to modify head to keep track
of the fact that
we now need to move it on to the second
item if that exists
if the second item didn't exist then
after we've done that self.head will
have become none
so we've removed the last item and
therefore we need to just tidy up and
make sure that self.tail is set to none
as well
okay that should be everything should we
try it out and see whether it works
run pi test on q dot pi
and it doesn't work
okay so what's going on um
it's saying that we got a list of nones
back
hmm this is
a little test that ran through and tried
to extract things from the list and it
was getting non instead of the elements
of the list so we've got something wrong
there
again this shows the value of writing
your tests so
pop was returning none why is pop
returning none
well because i've been stupid
and although i stored the value i never
actually bothered to return the value
and that's not very useful so we should
add
return value when we're all done and
then we can actually get the value that
was in that first item of the list
okay try again and now our test passes
okay so that now demonstrates
the the idea of building a queue a queue
is a very useful data structure
we've implemented a queue using the
concept of a linked list which is a very
very common data structure in computer
science
but also we've implemented these classes
by basically building new data types
for and then adding functions onto our
data types that the
user of that data type can use to
manipulate it so our new data type is a
queue
and we've added the add function and the
pop function to that that
our user that data type can use to
interact with a queue but the key thing
is that the user of our queue
doesn't need to care at all how it's
implemented we only need to know that
api
and this is generally the basis of
object-oriented programming
you build up a new data type with
associated
api associated with it and the users
only need to know the api they don't
actually need to know
how things are built inside it and that
means that we can then now start to
reason about our code
at a bit of a higher level of
abstraction than if we were actually
just
programming pure functions
so that's it for today next time we're
going to look at the remaining dynamic
data types that
every computer scientist should know
about see you then

